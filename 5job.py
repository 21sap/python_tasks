# функция поиска максимального значения в списке
def max_in_list(a):
    maximal = -1
    for i in range(0, len(a)):
        if int(a[i]) > maximal:
            maximal = int(a[i])
    return maximal

# функция заполнения "-1" списка
def minus_in_list(a):
    for i in range(0, n):
        a[i] = -1

# ввод данных
n = int(input())
a = list(input().split())
b = list(input().split())

# объявление переменных
h = [] # список, который будет содержать значение, на которое можно прыгнуть
hnew = [] # список, который будет содержать значение высоты, на которое 
          # лягушонок прыгнул и оказался на ней
h = a.copy()
minus_in_list(h)
hnew = h.copy()
k = 0 # количество наименьших возможных прыжков
h0 = 0 # текущее положение лягушонка
flag_exit = False # флаг выхода из цикла
i = 0 # высота до вершины горы

for c1 in range(0, n): # проходим цикл n раз, потому что выбираем максимальный
                        # прыжок на каждом шаге
    k += 1
    minus_in_list(h) # "зануляем", чтобы потом можно было записать новыми значениями
    i = n - h0 # высота до вершины горы
    c3 = 0
    for c2 in range(0, n):
        if a[c2] <= a[i-1]: 
            h[c3] = a[c2] # заполняем список h - доступные значения для прыжка
            c3 += 1
    for c4 in range (0,c3): # просматриваем все варианты прыжков,
        j = n - (int(h[c4])+h0)   # чтобы потом выбрать наибольший прыжок
        if j == 0:  # если j = 0, то достигли вершины и выходим из цикла
            flag_exit = True
            break
        hnew[c4] = int(h[c4]) + h0 - int(b[j-1])
    if flag_exit == True:
        break # заканчиваем перебор, так как допрыгнули до вершины горы
    if max_in_list(hnew) > h0:
        h0 = max_in_list(hnew) # если совершен прыжок, то установим в h0 новое
                               # max значение высоты, где оказался лягушонок
    minus_in_list(hnew) # "зануляем", чтобы потом можно было записать новыми знач-ми

if k == n:
    print (-1)
else:
    print (k)



    
    
    
         
    
